<%= pageHeading "Learning Plan: #{@learning_plan.name}"%>

<% if !@learning_plan.description.blank? %>
  <%= @learning_plan.description %>
<% end %>

<div id="lp_items">

<%= section "Topics" do %>

  <div id="topics">
    <% @learning_plan.topics.each do |topic| %>
      <%= render :partial => 'topics/show', :locals => {:topic => topic} %>
    <% end %>
  </div>
  
  <br/>
  <%= link_to "Add new topic ...", 
              learning_plan_topics_path(@learning_plan), 
              :method => :post,
              :remote => true %>
<% end %>

<%= section "Assignments" do %>

  <div id="assignment_plans">
    <% @learning_plan.assignment_plans.each do |assignment_plan| %>
      <%= render :partial => 'assignment_plans/show', :locals => {:assignment_plan => assignment_plan} %>
    <% end %>
  </div>
  
  <br/>
  <%= link_to "Add new assignment ...", 
              new_learning_plan_assignment_plan_path(@learning_plan), 
              :remote => true %> |
  <%= link_to "Preview assignments",
              preview_assignments_klass_path(@learning_plan.klass) %>
<% end %>

<%= section "Scheduling" do %>

  <div id="calendar"></div>

  <% content_for :javascript do %>
    <%= javascript_tag do %>
    
      function timeInClassZone(dd) {
        
        klass_minus_utc_hours = <%=
          original_time_zone = Time.zone
          # This is not accounting for daylight vs standard time re the incoming time
          Time.zone = @learning_plan.klass.time_zone
          offset = Time.zone.now.utc_offset/3600;
          Time.zone = original_time_zone
          offset
        %>;
        
        utc_minus_local_hours = dd.getTimezoneOffset()/60;
        local_time = dd.getTime();
        klass_time = new Date(local_time - (utc_minus_local_hours + klass_minus_utc_hours)*60*60*1000);
        
        alert (
          "klass_minus_utc_hours: " + klass_minus_utc_hours + "\n" +
          "utc_minus_local_hours: " + utc_minus_local_hours + "\n" +
          "local_time:            " + local_time + "\n" +
          "klass_time:            " + klass_time + "\n"
        );
        
        return klass_time;
      }
  
      function update_assignment_plan_times(id, starts_at, ends_at, revertFunc) {
        $.ajax({
          type: "POST",
          url: '/assignment_plans/' + id,
          data: { 
                  _method:'PUT', 
                  assignment_plan : { 
                      starts_at: timeInClassZone(starts_at), 
                      ends_at: timeInClassZone(ends_at) 
                  } 
          },
          dataType: 'json',
          success: function(msg) {},
          error: function(jqXHR, textStatus, errorThrown) {
            open_message_dialog(true, 150, 440, 'Error!', jQuery.parseJSON(jqXHR.responseText).join("<br/><br/>"));
            revertFunc();
          }
        });
      }
      
      $(document).ready(function() {
        $('#calendar').fullCalendar({
            timeFormat:  'h(:mm)t { - h(:mm)t}  ',
            eventColor: get_os_color('blue'),
            header: {
              left: 'title',
              center: 'agendaWeek,month',
              right: 'today prev,next'
            },
            events: [
              <% events = @learning_plan.assignment_plans.each_with_index do |assignment_plan, ii| %>
                <%= render :partial => 'assignment_plans/assignment_plan_event', 
                           :locals => {:assignment_plan => assignment_plan} %>
                <%= ',' if ii != @learning_plan.assignment_plans.count - 1%>
              <% end %>
            ],
            eventClick: function(calEvent, jsEvent, view) {
              $('#calendar').fullCalendar('changeView', view.name == 'agendaWeek' ? 'month' : 'agendaWeek' )
                            .fullCalendar('gotoDate', calEvent.start);
            },
            eventResize: function( event, dayDelta, minuteDelta, revertFunc, jsEvent, ui, view ) { 
              update_assignment_plan_times(event.ost_id, event.start, event.end, revertFunc);
            },
            eventDrop: function(event,dayDelta,minuteDelta,allDay,revertFunc) {
              update_assignment_plan_times(event.ost_id, event.start, event.end, revertFunc);
            }
        });        
      });
      
    <% end %>
  <% end %>

<% end %>

</div>

<%
  navitem { link_to "#{t(@learning_plan.klass.class)}", @learning_plan.klass }
  navitem { link_to "Concepts", learning_plan_concepts_path(@learning_plan)}
%>
